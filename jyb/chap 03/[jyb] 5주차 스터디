# 3.1 메모리의 본질, 포인터와 참조 

## 3.1.1 메모리의 본질은 무엇일까? 사물함, 비트, 바이트 객체 

- 메모리는 사물함 형태의 구성이며, 이 사물함을 메모리에서는 메모리 셀(memory cell)이라고 부름
- 사물함에 휴대폰, 지갑, 열쇠 같은 여러 종류의 물건을 수납할 수 있듯이 메모리 셀에는 0과 1이라는 비트(bit) 하나를 보관할 수 있음 
- 1비트로 정보를 표현하는 데에는 한계가 있기 때문에, 여덟 개의 메모리 셀을 묶어 1 바이트(byte)라고 부름 
- 사물함에 번호를 붙이듯 각 바이트마다 번호를 붙임 
- 따라서 모든 바이트는 메모리 내 자신의 주소, 즉 메모리 주소(memory address)를 가짐 
- 메모리 주소 1개를 사용하여 특정 메모리 셀 여러 개를 찾을 수 있는 것을 주소 지정(addressing)이라고 부름 
- 1바이트 역시 충분치 않기 때문에 4바이트(32비트)를 묶어 하나의 정수를 표현하는 단위로 사용함 
- 다양한 정보 조합을 표현하기 위해서는 4바이트 메모리 대신 12바이트가 필요함 
- 12바이트를 사용해 정보를 조합 및 표시하는 것을 프로그래밍 언어에서는 구조체(structure) 또는 객체(object)라고 표현함 

- 사용 가능한 프로그래밍 언어가 없을 때 8바이트 라는 작은 메모리를 읽고 쓰는 법은? 
- 메모리의 읽기와 쓰기의 본질을 직접 마주해야 함 
- 본질이란 메모리는 사물함이라는 사실을 인지하는 것 
- 1바이트를 저장할 수 있는 사물함 8개가 하나로 묶여 있으며 8개에 붙은 각각의 번호가 메모리 주소임 
- 연산 1+2를 수행하는 방법

1. 두 숫자 1과 2를 각각 1바이트짜리 사물함 두 개에 넣음
2. 숫자 1은 6번 사물함에 넣을 때 store 명령어를 사용한다면 -> `store 1 6`  `load r1 6`
-> 저장할 숫자 값(data value)와 메모리 주소 -> 모호한 해석의 문제
3.  특별한 기호 $ 필요 -> `store $1 6`  `load r1 6`

- 주소 6은 숫자 1을 나타내며, 주소 6을 변수 a라고 부를 수 있음 
- a 변수가 나타내는 숫자 1이 메모리 주소 6에 저장되어 있음 
- a 변수의 두 가지 의미

1. 값 1을 나타냄
2. 값 1은 메모리 주소 6에 저장됨 

- `b = a` -> a 값을 b에 준다는 할당(데이터 복사) 
- 데이터를 복사하는 방법 사용 -> 메모리 공간 부족 문제 발생 -> 어떻게 해야 할까? 

## 3.1.3 변수에서 포인터로: 포인터 이해하기

- 변수의 두 번째 의미에 초점을 둔다면 변수가 차지하는 메모리 공간과는 관계 없이 
메모리 주소만 알고 있다면 해당 데이터를 찾을 수 있음 
- 메모리 주소 역시 하나의 숫자이며 해당 데이터가 차지하는 메모리 공간 크기와 무관함 
- 변수가 값 뿐 아니라 메모리 주소까지 저장할 수 있게 되면서 포인터가 탄생함 
- 포인터는 주소 자체라고 언급되지만, 고급 언어에서 포인터는 메모리 주소를 더 높은 수준으로 추상화한 변수임 
- 포인터를 메모리 주소로만 이해한다면 간접 주소 지정을 알아야 함 
- 간접 주소 지정(indirect addressing) -> 어셈블리어에는 변수의 개념이 없기 때문에 
간접 주소 지정 개념 필요(주소1 -> 주소 3 -> 데이터) 
- 고급 언어의 경우 변수가 실제로 저장되는 위치에는 신경 쓸 필요가 없음 (b-> 데이터) 
- 변수가 값과 메모리 주소를 모두 담을 수 있게 되면서 포인터로 연결 리스트를 구성할 수 있게 됨 

## 3.1.4 포인터의 힘과 파괴력: 능력과 책임 

- 포인터를 지원하지 않는 프로그래밍 언어에서는 주소 개념이 없음 
- 주소 개념이 변수로 추상화되어 있기 때문에 변수가 '존재함' 만을 알고 있으면 됨 
- 자바와 파이썬과는 달리 C 언어는 메모리 주소를 추상화하지 않고 유연하므로 메모리 주소를 직접 알 수 있음 -> 포인터 개념 
- 포인터 개념이 있는 언어는 변수를 이해함으로써 저수준 계층에 가까워질 수 있음 
-> BCZ 변수 주소를 통해 해당 변수가 저장된 메모리 위치를 직접 확인할 수 있음 
- 포인터가 있는 언어에서 메모리 주소를 직접 알 수 있다는 것은 
-> 모든 추상화를 우회하여 직접 메모리를 읽고 쓸 수 있음 
-> 포인터 연산에 오류가 있으면 프로그램 실행 상태를 직접 파괴할 수 있음 
- 포인터는 메모리 직접 조작 가능 능력 및 실수를 하면 안 되는 더 높은 기준을 요구함 -> 잘못 다루면 프로그램 실행 시 오류 발생 가능 

## 3.1.5 포인터에서 참조로: 메모리 주소 감추기

- 참조(reference) -> 변수의 구체적인 메모리 주소를 얻을 수 없음/포인터와 유사한 구조의 산술 연산 불가능 
- 참조를 하면 데이터 복사의 필요성이 없기에 포인터를 사용할 때와 동일한 효과를 얻을 수 있음 
- 포인터는 메모리 주소를 추상화/참조는 포인터를 한 번 더 추상화 
- 가상 메모리 

# 3.2 프로세스는 메모리 안에서 어떤 모습을 하고 있을까? 

- 프로세스 주소 공간 구조 
![Image](https://github.com/user-attachments/assets/355220bc-7426-42a6-8799-12e70b0396c7)
- 코드 영역, 데이터 영역, 힙 영역, 스택 영역 

## 3.2.1 가상 메모리" 눈에 보이는 것이 항상 실제와 같지는 않다 

- 모든 프로세스의 코드 영역이 0x400000 에서 시작하며 서로 다른 두 프로세스 두 개가 메모리를 할당하기 위해 
malloc 함수를 호출하면 둘 다 0x7f64cb8을 반환하는 등 동일한 시작 주소 반환 가능성이 매우 높음 
- 두 프로세스가 모두 주소 0x7f64cb8에 데이터를 쓸 수 있는데 문제가 되는가? 
-> 0x7f64cb8 이 메모리 주소는 가짜 주소며 메모리에 조작 발생 전 실제 물리 메모리 주소로 변경 됨 
- 가상 메모리이며 여기서 사용되는 주소는 가상 메모리 주소 또는 가상 주소에 해당함 
- 실제 물리 메모리의 모습은 중구난방처럼 보임

1. 프로세스는 동일한 크기의 조각(chunk)으로 나뉘어 물리 메모리에 저장됨 
2. 모든 조각은 물리 메모리 전체에 무작위로 흩어져 있음 

- OS가 프로세스에 균일한 가상의 주소 공간을 제공하는 것을 방해하지 않는 이유 
-> 가상 메모리와 물리 메모리 사이의 사상(mapping) 관계를 유지 -> 페이지 테이블(page table) 존재 이유 

## 3.2.2 페이지와 페이지 테이블: 가상에서 현실로 

- 가상 메모리 주소 공간은 물리 메모리에 사상되어 있음 
![Image](https://github.com/user-attachments/assets/24987b58-9680-4580-bba5-f01052f5f53f)
- 그 사상 관계가 유지된다면 한 프로세스 주소 공간의 데이터가 실제 물리 메모리에 저장되는 위치를 신경 쓸 필요 없음 
- 사상관계를 유지하는 것 -> 페이지 테이블
- 각 프로세스에는 단 하나의 페이지 테이블만 있어야 함 
- 모든 가상 주소를 물리 주소에 사상하는 대신 프로세스의 주소 공간을 동일한 크기의 페이지(page)로 나눔 
- 페이지 단위로 사상이 이루어지므로 페이지 테이블이 가져야 하는 항목 수가 줄어듦 
- 두 프로세스가 동일한 메모리 주소에 기록하더라도 동일한 가상 메모리 주소를 다른 물리 메모리 주소에 사상함 
![Image](https://github.com/user-attachments/assets/d3f32f8e-c572-49c2-914f-05b4e4c68d9c)

# 3.3 스택 영역: 함수 호출은 어떻게 구현될까? 

## 3.3.1 프로그래머를 위한 도우미: 함수 

- 함수의 가장 기초적이고 간단한 코드 재사용 방식
- Don't Repeat Yourself
- 함수가 중요하다면 함수의 호출이 구현된 방법은? 

## 3.3.2 함수 호출 활동 추적하기: 스택 

- 전체 퀘스트 사이의 의존성
- 후입선출(last in first out) 순서 -> 스택과 같은 데이터 구조가 처리하기에 적합 
- 트리 구조의 순회가 재귀 구현 뿐 아니라 스택 구현에도 사용될 수 있음 

## 3.3.3 스택 프레임 및 스택 영역: 거시적 관점 

- 모든 함수는 실행 시 해당 함수가 실행될 때 사용되는 여러가지 정보가 저장된 
스택 프레임(stack frame) 또는 호출 스택(call stack)이 필요 -> 스택 구조를 통해 구성 -> 프로세스의 스택 영역에 생성 
- 프로세스의 스택 영역의 높은 주소(highest address)가 맨 위, 스택 영역은 낮은 주소 방향으로 커짐 -> ???? 뭔소리 
- 스택 영역이 차지하는 메모리는 함수 호출 깊이에 따라 증가하며 함수 호출이 완료될 수록 감소함 
- 스택 프레임에는 무엇이 들어있는가? -> 함수를 호출할 때 포함되는 정보 이해 필요 -> x86 플랫폼으로 이해 

## 3.3.4 함수 점프와 반환은 어떻게 구현될까? 

- 함수 A가 함수 B를 호출하면 제어권은 함수 A에서 함수 B로 넘어감 
- 제어권 -> CPU가 어떤 함수에 속하는 기계 명령어를 실행하는가를 의미 
- CPU가 함수 A의 명령어 실행하다가 함수 B의 명령어 점프하기 
-> 제어권이 함수 A에서 함수 B로 이전되었음 
- 제어권 이전 시 필요한 정보 

1. 반환(return) -> 어디에서 왔는가에 대한 정보
2. 점프(jump) -> 어디로 가는가에 대한 정보 

- 즉 함수 A가 함수 B를 호출할 때 알아야 하는 정보 

1. 함수 A의 기계 명령어가 어디까지 실행되어야 하는가(어디에서 왔는가)
2. 함수 B의 첫 번째 기계 명령어가 위치한 주소(어디로 가야 하는가) 

- 그렇다면 이 정보를 획득하고 유지하는 방법? -> 스택 프레임의 도움 필요 

![Image](https://github.com/user-attachments/assets/e70a0cdd-de99-470f-8b95-9a5412b08d55)

- 현재 함수 A의 기계 명령어(명령어 주소는 0x400564) 를 실행 중인 CPU
- 이어서 CPU는 다음 명령어 실행 `call 0x400540`
- 기계 명령어에 대응하는 것은 코드의 함수 호출 -> call 뒤의 명령어 주소 -> 함수 B의 첫 번째 기계 명령어 
- call 기계 명령어를 실행한 직후 CPU는 함수 B로 점프함 
- 함수 B의 실행 완료 후에는 어디로 가야 하나? 

- call 명령어 실행 시 하는 일 

1. 지정함 함수로 점프하기
2. call 명령어 다음에 위치한 명령어 주소를 함수 A의 스택 프레임에 넣기 

![Image](https://github.com/user-attachments/assets/f1f98a00-2986-4201-9f4a-65cc69cc6c8c)

- 함수 A의 스택 프레임에 반환 주소가 추가되며 조금 커짐
- 스택은 상단에 고정되어 있기 때문에 크기가 커질수록 하단으로 커짐 
- 각 함수는 자신만의 스택 프레임이 있기 때문에 함수 B를 호출하면
새로운 스택 프레임이 추가되고 스택 영역이 차지하는 메모리의 크기도 증가함 
## 3.3.5 매개변수 전달과 반환값은 어떻게 구현될까? 

- CPU는 기계 명령어를 실행할 때 점프와 반환으로 함수를 호출할 수 있음
- 함수를 호출 할 때는 함수 이름 외에도 매개변수를 전달하고 반환값을 가져와야 하는데 이를 구현하는 방법은? 
- x86-64에서는 대부분 이 작업을 레지스터로 함 
- 그러나 CPU 내부의 레지스터 수는 제한되어 있음
-> 전달된 매개변수 수가 사용 가능한 레지스터 수보다 많다면 어떻게 해야 하는가? -> 스택 프레임의 도움이 피룡함 
- 매개변수 수가 레지스터 수보다 많으면 나머지 매개변수는 스텍 프레임에 직접 넣을 수 있기 때문에 
새로 호출된 함수가 이전 함수의 스택 프레임에서 매개변수를 가져오면 됨 

## 3.3.6 지역 변수는 어디에 있을까? 

- 함수 외부에 정의된 변수 -> 전역 변수 (실행 파일의 데이터 영역에 저장되어 있음) 
-> 프로그램이 실행되면 프로세스 주소 공간의 데이터 영역에 적재
- 함수 내부에 정의된 변수 -> 지역 변수
-> 해당 함수에서만 사용 가능하며 외부에서는 접근 불가능  -> 함수가 실행될 때 배치되는 곳은 어디인가? 
- 매개변수와 마찬가지로 레지스터에 저장 가능하지만 
로컬 변수의 수가 레지스터 수보다 많으면 이 변수도 스택 프레임에 저장 
- 레지스터가 여러 개의 함수를 실행할 때 전부 사용된다면 
함수 A가 함수 B를 호출할 때 함수 A가 레지스터에 기록한 지역 변수 정보를 함수 B가 덮어쓰나? 문제가 되나? 

## 3.3.7 레지스터의 저장과 복원 

- 문제가 됨
- 따라서 레지스터에 지역 변수를 저장하기 전에 반드시 먼저 레지스터에 원래 저장되어 있던 초깃값을 꺼냈다가
레지스터를 사용하고 나면 다시 그 초깃값을 저장해야 함 
- 레지스터에 원래 저장되어 있는 값은 어디에 저장? -> 마찬가지로 함수의 스택 프레임에 저장됨 
- 함수 실행이 완료된 후 스택 프레임에 저장되어 있는 초깃값을 상응하는 레지스터 내용으로 복원만 하면 됨 

## 3.3.8 큰 그림을 그려보자, 우리는 지금 어디에 있을까? 

![Image](https://github.com/user-attachments/assets/f99cdbd7-a2aa-4841-ad08-fcc22896a785)

- 스택 프레임은 스택 영역에 위치함 -> 프로세스 주소 공간의 일부 
- 함수가 호출될 때마다 상응하는 스택 프레임은 함수 실행 시의 정보를 저장하기 위해 생성되며
함수 호출 단계가 증가함에 따라 스택 영역이 메모리를 점점 더 많이 차지하게 됨 
-> 그러나 크기 제함이 있으며 일정한 제한을 초과하면 스택 넘침(stack overflow) 오류 발생 
- 주의할 점

1. 너무 큰 지역 변수를 만들면 안 됨
2. 함수 호출 단계가 너무 많으면 안 됨

- 매개변수가 너무 많으면 일부는 스택에 저장, 레지스터 내용 중 일부는 스택 프레임에 저장 
- 매개변수가 너무 많아 레지스터에 저장되지 못한다는 정보는 어떻게 할 수 있는가? 
- 스택 영역의 증가와 감소는 구체적으로 어떻게 구현되는가?
- 구현된다면 그 책임은 누구에게 있는가? 

- 스택 영역 아래에는 유휴 영역(free segment)가 있음 
- 스택 영역이 계속 증가하면 유휴 영역을 점유함 